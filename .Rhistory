# Create histogram
hist(random_values, col = "skyblue", breaks = 20, main = "Histogram in Base R",
xlab = "Values", ylab = "Frequency")
#Task 4
# Load necessary libraries
library(ggplot2)
# Using the same dataset from Task 3
ggplot(data = data.frame(Values = random_values), aes(x = Values)) +
geom_histogram(binwidth = 1, fill = "skyblue", color = "white", boundary = 0.5) +
labs(title = "Histogram with ggplot2", x = "Values", y = "Frequency") +
theme_minimal() +
theme(panel.grid.major = element_line(color = "gray", linetype = "dashed"),
panel.grid.minor = element_blank(),
axis.ticks = element_blank())
install.packages("plotly")
# Load necessary libraries
library(plotly)
# Create dataset
product_data <- data.frame(
Product = c("Product A", "Product B", "Product C"),
Sales = c(150, 200, 120)
)
# Create interactive bar chart with Plotly
plot_ly(
data = product_data,
x = ~Product,
y = ~Sales,
type = 'bar',
marker = list(color = c("skyblue", "lightgreen", "coral"))
) %>%
layout(
title = "Interactive Bar Chart with Plotly",
xaxis = list(title = "Products"),
yaxis = list(title = "Sales"),
showlegend = FALSE
)
#bar chart in base r
df<- data.frame(
Categories = c('Category A','Category B','Category C'),
Values = c(15,20,10)
)
barplot(df$Values, names.arg = row.names(df),col = "lightgreen", border = "black", main = "Customized Bar Chart",
xlab = "Categories",ylab = "Values", ylim = c(0, 25), beside = TRUE)
# bar chart with ggplot2
library(ggplot2)
ggplot(df, aes(x = rownames(df), y=Values)) +
geom_bar(stat ='identity', position = "dodge", color = "Black") +
labs(title ='Customized Bar Chart', x="Categories", y="Values", fill="Number of Categories") +
theme_minimal() +
theme(legend.position = "top")
#histogram in base r
set.seed(456)
histogram_data<-rnorm(200, mean = 50, sd = 10)
histogram_data
hist(histogram_data, col = 'lightgreen', main = 'histogram assignment',
xlab = "Values", ylab = "Frequency")
#histogram with ggplot2
ggplot(data.frame(Values = histogram_data),
aes(x=Values)) +
geom_histogram(fill='skyblue', bins = 30, color='black') +
labs(title = "Histogram with ggplot", x ="Values", y="Frequency") +
theme_minimal()
#PLOTLY
def<- data.frame(
Categories = c('Product A', 'Product B', 'Product C'),
Sales = c(150,200,120)
)
install.packages("plotly")
library(plotly)
help("plotly")
plot_ly(z =~volcano, type = "surface")
install.packages("plotly")
barplot(df$Values, names.arg = row.names(df),col = "lightgreen", border = "black", main = "Customized Bar Chart",
xlab = "Categories",ylab = "Values", ylim = c(0, 25), beside = TRUE)
# bar chart with ggplot2
library(ggplot2)
ggplot(df, aes(x = rownames(df), y=Values)) +
geom_bar(stat ='identity', position = "dodge", color = "Black") +
labs(title ='Customized Bar Chart', x="Categories", y="Values", fill="Number of Categories") +
theme_minimal() +
theme(legend.position = "top")
#histogram in base r
set.seed(456)
histogram_data<-rnorm(200, mean = 50, sd = 10)
histogram_data
hist(histogram_data, col = 'lightgreen', main = 'histogram assignment',
xlab = "Values", ylab = "Frequency")
#histogram with ggplot2
ggplot(data.frame(Values = histogram_data),
aes(x=Values)) +
geom_histogram(fill='skyblue', bins = 30, color='black') +
labs(title = "Histogram with ggplot", x ="Values", y="Frequency") +
theme_minimal()
#PLOTLY
def<- data.frame(
Categories = c('Product A', 'Product B', 'Product C'),
Sales = c(150,200,120)
)
library(plotly)
help("plotly")
plot_ly(z =~volcano, type = "surface")
#TASK 1
#Bar Chart in Base R
#Data Preparation
data<-data.frame(category=c("A","B","C"),value=c(15,20,10))
data
#creating barchart with base r
barplot(data$value,names.arg=data$category,
col =c("beige","green","pink"),
main="Base r barchart",
xlab="category",
ylab="value")
#TASK 2
#Barchart with ggplot
#installing and loading ggplot
install.packages("ggplot2")
library(ggplot2)
#creating barchart with ggplot
ggplot(data,aes(x=category,y=value))+
geom_bar(stat="identity",fill=c("magenta","purple","violet"),color="black")+
ggtitle("ggplot bar chart")+
xlab("category")+
ylab("value")+
theme_minimal()
#TASK 3
#Histogram in baSE R
#Data preparation
data<-data.frame(values=rnorm(200,mean=40,sd=2))
data
#creating histogran in base r
hist(data$values,col="lightgreen",
main="R base histogram",
lwd="3",
xlab="Values",
ylab="Frequency"
)
#TASK 4
#Histogram with ggplot
ggplot(data,aes(x=values))+
geom_histogram(fill="violet",binwidth=1,bins=100,color="black",linetype="dashed")+
xlab("values")+
ylab("frequency")+
ggtitle("ggplot histogram")+
theme_minimal()
#Interactive barchart with plotly
#Data Preparation
data<-data.frame(category=c("product A","product B","product C"),values=c("150","200","120"))
data
install.packages("ggplot2")
#creating barchart with base r
barplot(data$value,names.arg=data$category,
col =c("beige","green","pink"),
main="Base r barchart",
xlab="category",
ylab="value")
#TASK 2
#Barchart with ggplot
#installing and loading ggplot
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
#creating barchart with ggplot
ggplot(data,aes(x=category,y=value))+
geom_bar(stat="identity",fill=c("magenta","purple","violet"),color="black")+
ggtitle("ggplot bar chart")+
xlab("category")+
ylab("value")+
theme_minimal()
#TASK 3
#Histogram in baSE R
#Data preparation
data<-data.frame(values=rnorm(200,mean=40,sd=2))
data
#creating histogran in base r
hist(data$values,col="lightgreen",
main="R base histogram",
lwd="3",
xlab="Values",
ylab="Frequency"
)
#TASK 4
#Histogram with ggplot
ggplot(data,aes(x=values))+
geom_histogram(fill="violet",binwidth=1,bins=100,color="black",linetype="dashed")+
xlab("values")+
ylab("frequency")+
ggtitle("ggplot histogram")+
theme_minimal()
#Interactive barchart with plotly
#Data Preparation
data<-data.frame(category=c("product A","product B","product C"),values=c("150","200","120"))
data
#Task 1: Bar Charts in Base R
dat <- data.frame(Categories=c("Category A","Category B","Category C"),
Values=c(15,20,10))
#Create bar chart
barplot(dat$Values, names.arg = dat$Categories, col = 'skyblue')
barplot(dat$Values, names.arg = dat$Categories, col = c('skyblue','darkred','orange'),
main = "Customized Bar Chart", xlab = "Categories", ylab = "Values")
#Tak 2: Bar chart with ggplot2
#Load ggplot package
library(ggplot2)
ggplot(dat,aes(x=Categories, y=Values,fill=Categories))+
geom_bar(stat = "identity", position = "dodge")+
labs(title="Bar chart of Values",x="Categories",y="Values",fill="Categories")+
scale_fill_manual(values = c("darkred","blue4","skyblue4"))+
theme_classic2()+
theme(axis.title = element_text(face = "bold"),
plot.title = element_text(face = "bold",size=10),
axis.text=element_text(face = "bold"),
legend.title = element_text(face = "bold"))
#Task 3: Histogram in Base R
data1 <- rnorm(200,60,20)
# Plot a histogram
hist(data1, col = "skyblue4",breaks = 10, main = "Histogram of data",
xlab = "Values", ylab = "Frequency")
ggplot(data.frame(values=data1),aes(x = values))+
geom_histogram(fill = "skyblue3", bins = 10, color = "grey26") +
labs( title = "Histogram with ggplot", x = "Values", y = "Frequency") +
scale_y_continuous(breaks = seq(0,60,10),limits=c(0,60))+
scale_x_continuous(breaks = seq(0,120,20))+
theme_minimal()+
theme(axis.title = element_text(face = "bold"),
plot.title = element_text(face = "bold",color="grey10"))
library(plotly)
#Create required dataset
data2 <- data.frame(Categories=c('Product A','Product B','Product C'),
Sales=c(150,200,120))
##Create bar chart with plotly
plot_ly(data2,x = ~Categories,y=~Sales,type="bar",color=~Categories) %>%
layout(title = "Product sales bar chart",
xaxis = list(title = "Categories of products"),
yaxis = list(title = "Sales"))
# Create the dataset
data1 <- data.frame(
categories = c("Category A", "Category B", "Category C"),
values     = c(15, 20, 10)
)
data1
# Bar chart
barplot(data1$values, names.arg = data1$categories, col = c("skyblue", "navy", "palegreen"),
xlab = "Categories", ylab = "Values", main = "Bar Chart of Categories")
# Loading the ggplot2 library
library(ggplot2)
data1     #data set from task 1
# Creating a bar chat with ggplot2
ggplot(data1, aes(x = categories, y = values, fill = categories)) +
geom_bar(stat = "identity", color = "black") +
labs(x = "Categories", y = "Values", title = "Bar Chart of Categories with ggplot2") +
geom_text(aes(label = values), vjust = -0.3, size = 4) +
theme_minimal() +
theme(legend.position = "bottom")
# Creating a data set with 200 random values from a normal distribution
set.seed(123)
hist_data <- rnorm(200, mean = 50, sd = 10)
hist_data
# Histogram
hist(hist_data, col = "darkorange",
xlab = "Values", ylab = "Frequency", main = "Histogram of Random Normal Distribution in Base R"
)
# Load necessary library
library(ggplot2)
hist_data  #data set from task 3
# Create a ggplot histogram
ggplot(data.frame(values = hist_data), aes(x = values)) +
geom_histogram(bin = 5, fill = "skyblue", color = "black") +
labs(x = "Values", y = "Frequency", title = "Histogram of Random Normal Distribution with ggplot") +
theme_minimal() +
theme(axis.text = element_text(size = 11, color = "blue"), axis.title = element_text(size = 12),
panel.grid.major = element_line(color = "lightgray", linetype = 1))
#Installing the plotly package
install.packages("plotly")
install.packages("plotly")
library(plotly)     # Load necessary library
# Creating the data set
data0 <- data.frame(
categories = c("Product A", "Product B", "Product C"),
sales      = c(150, 200, 120))
data0
# Creating an interactive bar chart using Plotly
fig <- plot_ly(data0, x = ~categories, y = ~sales, type = 'bar',
marker = list(color = c("skyblue", "lightgreen", "cyan")))
fig <- fig%>% layout(title = "Sales of Products",
xaxis = list(title = "Products"),
yaxis = list(title = "Sales"),
barmode = 'group')
fig
library(ggplot2)
# Create a dataset
Categories <- c("Category A", "Category B", "Category C")
Values <- c(15, 20, 10)
colors = c("navy", "lightgreen", "red")
# Creating a bar chart using the R Base
barplot(Values, names.arg = Categories, col= colors, border = "Blue",
main = "Bar chart of Values for each Category using Bar plot",
xlab = "Category", ylab = "Value",
ylim = c(0, 20), beside = TRUE, legend.text = c("Values"), args.legend = list(title = "Legend"))
# Bar chart using the ggplot2
data <- data.frame(
Categories = c("Category A", "Category B", "Category C"),
Values = c(15, 20, 10)
)
data
View(data)
# Create a bar chart using ggplot2
ggplot(data, aes(x = Categories, y = Values, fill= factor(Categories)))+
geom_bar(stat = "identity", position = "dodge", color = "red")+
labs(title = "Bar chart of Values for differenr categories using ggplot2",
xlab = "Categories", ylab = "Values", fill = "Different categories")+
theme_minimal()+
theme(legend.position = "left")
# Create a dataset for histogram
set.seed(1)
Hist_data <- rnorm(200, mean = 10, sd = 3)
Hist_data
# Plot a histogram using R Base
hist(Hist_data, col = "steelblue", main = "Histogram using R Base",
xlab = "Values", ylab = "Frequency",
xlim = c(0, 20), ylim = c(0, 50), breaks = 10)
# Histogram using the ggplot2
ggplot(data.frame(values = Hist_data), aes(x = values))+
geom_histogram(fill = "steelblue", bins = 20, color = "black")+
labs(title = "Histogram using the ggplot2", xlab = "Values", ylab = "Frequency")+
theme_minimal()
library(plotly)
# Create a dataset
x <- c('Product A', 'Product B', 'Product C')
y <- c(150, 200, 120)
Plot_data <- data.frame(x, y)
Plot_data
# Use plotly
chart <- plot_ly(Plot_data, x = ~x, y = ~y, type = 'bar',
marker = list(color = c("navy","lightgreen", "magenta"),
line = list(color = "black",
width = 1.5)))
chart <- chart %>% layout(title = "Bar chart using plotly",
xaxis = list(title= "Product"),
yaxis = list(title = "Value"))
chart
#Task 1:Bar Chart in Base R
#Creating a dataframe
data<-data.frame(Category=c('Category A','Category B','Category C'),
Values=c(15,20,10))
data
#creating a bar chart for the loaded data
barplot(data$Values,names.arg = row.names(data))
#Customizing the Bar chart
barplot(data$Values,names.arg = row.names(data), col=c('yellow','green','red'),
main ='Category Vs Values' ,xlab = 'Values', ylab = 'Categories')
#Task 2:Bar Chart with ggplot2
install.packages('ggplot2')
install.packages("ggplot2")
library('ggplot2')
ggplot(data,aes(x=Category,y=Values))+
geom_bar(stat = 'identity',fill='blue')
#Customizing the bar chart
ggplot(data,aes(x=Category,y=Values))+
geom_bar(stat = 'identity',fill=row.names(data))+
labs(title = 'Category Vs Values')+ theme()
#Task 3:Histogram in Base R
#creating a dataset
data1<-rnorm(200)
data1
hist(data1)
#customizing the histogram
hist(data1, main = 'Random Data',col = 'Red', xlab = 'Values',ylab = 'Frequency')
#Task 4:Histogram with ggplot2
ggplot(data.frame(Values=data1),aes(x=Values))+
geom_histogram()
#customizing the histogram
ggplot(data.frame(Values=data1),aes(x=Values))+
geom_histogram(fill='red',binwidth = 0.2,color='black')+
labs(title = 'Random data',x='Values',y='Frequency')
#Task 5: Interactive Bar Chart with Plotly
#Creating dataset
data2<-data.frame(Categories=c("Product A", "Product B", "Product C"),
Sales=c(150, 200, 120))
data2
library('plotly')
plot_ly(data2,x=~Categories,y=~Sales,type = 'bar')
#Task 1
# Load the mtcars dataset
data(mtcars)
# Examine the structure of the dataset
str(mtcars)
# Conduct a one-sample t-test on the "mpg" variable
t_test_result <- t.test(mtcars$mpg, mu = 20)
# Print the result
print(t_test_result)
# Interpretation
cat("T-Statistic:", t_test_result$statistic, "\n")
cat("Degrees of Freedom:", t_test_result$parameter, "\n")
cat("P-Value:", t_test_result$p.value, "\n")
cat("Confidence Interval:", t_test_result$conf.int, "\n")
#Task 2
# Create two vectors of data: "before" and "after" with different values
set.seed(42)  # Setting seed for reproducibility
before <- rnorm(15, mean = 50, sd = 5)
after <- rnorm(15, mean = 55, sd = 8)  # Different values for "after"
# Conduct a paired samples t-test
paired_t_test_result <- t.test(before, after, paired = TRUE)
# Print the result
print(paired_t_test_result)
# Interpretation
cat("T-Statistic:", paired_t_test_result$statistic, "\n")
cat("Degrees of Freedom:", paired_t_test_result$parameter, "\n")
cat("P-Value:", paired_t_test_result$p.value, "\n")
cat("Confidence Interval:", paired_t_test_result$conf.int, "\n")
#one sample t-test
data(mtcars)
str(mtcars)
t_result<- t.test(mtcars$mpg, mu=20)
print(t_result)
'''
The absolute value is 0.08506 which gives a reason to reject the null hypothesis as it is
positive; this is a weak reason because it is a weak positive value. The degrees of freedom
are 31. The p-value is higher than the significance value which gives a reason to not reject
the null hypothesis. Therefore, it can be assumed that the mean of the mpg is equal to 20
'''
#paired samples t test
before<- c(10,13,14,15,16,17,18,19,20,11)
after<- c(19,18,22,14,17,18,16,11,10,9)
t_result_paired<- t.test(before,after,paired = TRUE)
print(t_result_paired)
#TASK 1
#One sample T-test
#Data Preparation
data(mtcars)
head(mtcars)
str(mtcars)
#Conducting one sample t-test
res<-t.test(mtcars$mpg,mu=20)
res
#TASK 2
#Paired sample t-test
#Data preparation
before <- c(52,66,89,87,89,72,66,65,49,62)
after <- c(51,66,71,73,70,68,60,51,40,57)
#Conducting paired sample t test
t.test(before,after,paired=TRUE)
#Task 1: One-Sample T-Test (10 marks)
#Data Preparation
#Load mtcars data
data("mtcars")
#Check structure of data
str(mtcars)
#One-Sample T-Test
t.test(mtcars$mpg,mu = 20,conf.level = 0.95)
#Task 2: Paired Samples T-Test
#Data Preparation
before <- rnorm(10,mean = 10,sd = 5)
after <- rnorm(10,mean = 15,sd = 3)
#Paired Samples T-Test
paired_t_test <- t.test(before,after,paired = TRUE,conf.level = 0.95)
print(paired_t_test)
#Data Preparation
# Loading the mtcars data set
data(mtcars)
# Examining the structure of the data set
str(mtcars)
#One-Sample T-Test
# Conduct a one-sample t-test on the 'mpg' variable
t_test_result <- t.test(mtcars$mpg, mu = 20)
# Print the results
print(t_test_result)
# Print the results
print(t_test_result)
# Print the results
print(t_test_result)
# Print the results
print(t_test_result)
# Print the results
print(t_test_result)
# Print the results
print(t_test_result)
# Print the results
print(t_test_result)
# Print the results
print(t_test_result)
-------------------------------------------------------------------------------
#Task 2: Paired Samples T-Test
#Data Preparation
# Creating two vectors of data 'before' and 'after'
before <- c(10, 33, 50, 26, 1, 28, 41, 11, 21, 12)
after <- c(12, 23, 30, 8, 17, 39, 27, 20, 34, 16)
#Task 1
#Loading data into R
data("mtcars")
str(mtcars)
#one sample T-Test
result<-t.test(mtcars$mpg,mu=20)
result
# setting significance at 0.05
result<-t.test(mtcars$mpg,mu=20, conf.level = 0.95)
result
'''
P-value is greater than significant level 0.05 meaning
that the distribution of the data are not significantly
different from normal distribtion.
'''
#Task 2
#Data preparation
set.seed(0)
after<-rnorm(10,mean =25,sd=5)
before<-rnorm(10,mean = 10, sd=1)
after
before
#Paired Samples T-Test
result_1<-t.test(before,after, paired = TRUE)
# setting significance at 0.05
result_1<-t.test(before,after, paired = TRUE, conf.level = 0.95)
result_1
